plugins {    alias(libs.plugins.android.application)    alias(libs.plugins.kotlin.android)    id("com.jaredsburrows.license")}android {    namespace = "com.v2ray.ang"    compileSdk = 35    defaultConfig {        applicationId = "com.xiexievpn.app"        minSdk = 21        targetSdk = 35        versionCode = 682        versionName = "1.10.26"        multiDexEnabled = true        val abiFilterList = (properties["ABI_FILTERS"] as? String)?.split(';')        splits {            abi {                isEnable = true                reset()                if (abiFilterList != null && abiFilterList.isNotEmpty()) {                    include(*abiFilterList.toTypedArray())                } else {                    include(                        "arm64-v8a",                        "armeabi-v7a",                        "x86_64",                        "x86"                    )                }                isUniversalApk = abiFilterList.isNullOrEmpty()            }        }        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"    }    signingConfigs {        create("release") {            storeFile = file(project.property("MYAPP_RELEASE_STORE_FILE") as String)            storePassword = project.property("MYAPP_RELEASE_STORE_PASSWORD") as String            keyAlias = project.property("MYAPP_RELEASE_KEY_ALIAS") as String            keyPassword = project.property("MYAPP_RELEASE_KEY_PASSWORD") as String        }    }    buildTypes {        release {            isMinifyEnabled = false            proguardFiles(                getDefaultProguardFile("proguard-android-optimize.txt"),                "proguard-rules.pro"            )            signingConfig = signingConfigs.getByName("release")        }    }    flavorDimensions.add("distribution")    productFlavors {        create("fdroid") {            dimension = "distribution"            applicationIdSuffix = ".fdroid"            buildConfigField("String", "DISTRIBUTION", "\"F-Droid\"")        }        create("playstore") {            dimension = "distribution"            buildConfigField("String", "DISTRIBUTION", "\"Play Store\"")        }    }    sourceSets {        getByName("main") {            jniLibs.srcDirs("libs")        }    }    compileOptions {        isCoreLibraryDesugaringEnabled = true        sourceCompatibility = JavaVersion.VERSION_17        targetCompatibility = JavaVersion.VERSION_17    }    kotlinOptions {        jvmTarget = JavaVersion.VERSION_17.toString()    }    applicationVariants.all {        val variant = this        val isFdroid = variant.productFlavors.any { it.name == "fdroid" }        if (isFdroid) {            val versionCodes =                mapOf(                    "armeabi-v7a" to 2, "arm64-v8a" to 1, "x86" to 4, "x86_64" to 3, "universal" to 0                )            variant.outputs                .map { it as com.android.build.gradle.internal.api.ApkVariantOutputImpl }                .forEach { output ->                    val abi = output.getFilter("ABI") ?: "universal"                    output.outputFileName = "xiexievpn_${variant.versionName}-fdroid_${abi}.apk"                    if (versionCodes.containsKey(abi)) {                        output.versionCodeOverride =                            (100 * variant.versionCode + versionCodes[abi]!!).plus(5000000)                    } else {                        return@forEach                    }                }        } else {            val versionCodes =                mapOf("armeabi-v7a" to 4, "arm64-v8a" to 4, "x86" to 4, "x86_64" to 4, "universal" to 4)            variant.outputs                .map { it as com.android.build.gradle.internal.api.ApkVariantOutputImpl }                .forEach { output ->                    val abi = if (output.getFilter("ABI") != null)                        output.getFilter("ABI")                    else                        "universal"                    output.outputFileName = "xiexievpn_${variant.versionName}_${abi}.apk"                    if (versionCodes.containsKey(abi)) {                        output.versionCodeOverride =                            (1000000 * versionCodes[abi]!!).plus(variant.versionCode)                    } else {                        return@forEach                    }                }        }    }    buildFeatures {        viewBinding = true        buildConfig = true    }    packaging {        jniLibs {            useLegacyPackaging = true        }    }}dependencies {    implementation(fileTree(mapOf("dir" to "libs", "include" to listOf("*.aar", "*.jar"))))    implementation(libs.androidx.core.ktx)    implementation(libs.androidx.appcompat)    implementation(libs.androidx.activity)    implementation(libs.androidx.constraintlayout)    implementation(libs.preference.ktx)    implementation(libs.recyclerview)    implementation(libs.androidx.swiperefreshlayout)    implementation(libs.material)    implementation(libs.toasty)    implementation(libs.editorkit)    implementation(libs.flexbox)    implementation(libs.mmkv.static)    implementation(libs.gson)    implementation(libs.kotlinx.coroutines.android)    implementation(libs.kotlinx.coroutines.core)    implementation(libs.language.base)    implementation(libs.language.json)    implementation(libs.quickie.foss)    implementation(libs.core)    implementation(libs.lifecycle.viewmodel.ktx)    implementation(libs.lifecycle.livedata.ktx)    implementation(libs.lifecycle.runtime.ktx)    implementation(libs.work.runtime.ktx)    implementation(libs.work.multiprocess)    implementation(libs.multidex)    testImplementation(libs.junit)    androidTestImplementation(libs.androidx.junit)    androidTestImplementation(libs.androidx.espresso.core)    testImplementation(libs.org.mockito.mockito.inline)    testImplementation(libs.mockito.kotlin)    coreLibraryDesugaring(libs.desugar.jdk.libs)}